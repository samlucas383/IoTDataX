services:
  iotapi:
    build:
      context: ./services/IoTapi
      dockerfile: Dockerfile
    image: iotapi:latest
    container_name: iotapi
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://iotuser:iotpass@postgres:5432/iotdb
      - MQTT_BROKER=mosquitto
    depends_on:
      - postgres
      - mosquitto
    ports:
      - "8000:8000"
    networks:
      - iot-network

  iot-frontend:
    build:
      context: ./services/Iotfrontend/iot-react-app
      dockerfile: Dockerfile
    image: iot-react-app:latest
    container_name: iot-react-app
    restart: unless-stopped
    ports:
      - "3000:80" # maps host 3000 -> container 80 (nginx)
    networks:
      - iot-network

  swift-app:
    build:
      context: ./services/Iotfrontend/swift-app
      dockerfile: Dockerfile
    image: swift-app:latest
    container_name: swift-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - iot-network

  # Generic device simulator
  device-sim:
    build:
      context: ./services/device-sim
      dockerfile: Dockerfile
    image: device-sim:latest
    container_name: device-sim
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USER=
      - MQTT_PASS=
      - NUM_DEVICES=2
      - INTERVAL=10
      - PYTHONUNBUFFERED=1       
    command: ["python","-u","sim.py"] 
    depends_on:
      - mosquitto
    networks:
      - iot-network

  # ESP32 simulators
  device-sim-esp32:
    build:
      context: ./services/device-sim
      dockerfile: Dockerfile
    image: device-sim:latest
    container_name: device-sim-esp32
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USER=
      - MQTT_PASS=
      - NUM_DEVICES=2
      - INTERVAL=8
      - PYTHONUNBUFFERED=1
    command: ["python","-u","sim_esp32.py"]
    depends_on:
      - mosquitto
    networks:
      - iot-network

  # Arduino Nano 33 IoT simulators
  device-sim-arduino:
    build:
      context: ./services/device-sim
      dockerfile: Dockerfile
    image: device-sim:latest
    container_name: device-sim-arduino
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USER=
      - MQTT_PASS=
      - NUM_DEVICES=2
      - INTERVAL=6
      - PYTHONUNBUFFERED=1
    command: ["python","-u","sim_arduino.py"]
    depends_on:
      - mosquitto
    networks:
      - iot-network

  # Raspberry Pi Pico W simulators
  device-sim-pico:
    build:
      context: ./services/device-sim
      dockerfile: Dockerfile
    image: device-sim:latest
    container_name: device-sim-pico
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USER=
      - MQTT_PASS=
      - NUM_DEVICES=2
      - INTERVAL=7
      - PYTHONUNBUFFERED=1
    command: ["python","-u","sim_pico.py"]
    depends_on:
      - mosquitto
    networks:
      - iot-network

  # STM32 industrial simulators
  device-sim-stm32:
    build:
      context: ./services/device-sim
      dockerfile: Dockerfile
    image: device-sim:latest
    container_name: device-sim-stm32
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - MQTT_USER=
      - MQTT_PASS=
      - NUM_DEVICES=1
      - INTERVAL=5
      - PYTHONUNBUFFERED=1
    command: ["python","-u","sim_stm32.py"]
    depends_on:
      - mosquitto
    networks:
      - iot-network

  postgres:
    image: postgres:15-alpine
    container_name: iot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: iotuser
      POSTGRES_PASSWORD: iotpass
      POSTGRES_DB: iotdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - iot-network

  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001" # websocket port if needed
    volumes:
      - mosq-data:/mosquitto/data
      - ./services/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    networks:
      - iot-network
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h 127.0.0.1 -t hc -m ok -r && mosquitto_sub -h 127.0.0.1 -t hc -C 1 -W 2 >/dev/null"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s

volumes:
  pgdata:
  mosq-data:
  mosq-conf:

networks:
  iot-network:
    driver: bridge
